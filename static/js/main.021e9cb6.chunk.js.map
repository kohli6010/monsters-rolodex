{"version":3,"sources":["component/search-box/search-box.component.jsx","component/card/card.component.jsx","component/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","react_default","a","createElement","className","type","placeholder","onChange","handleChange","Card","src","concat","id","alt","monster","name","CardList","monsters","map","i","card_component_Card","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","bind","assertThisInitialized","_this2","fetch","then","response","json","user","setState","e","target","value","_this3","filteredMonster","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAIaA,eAAY,SAACC,GACzB,OAAOC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASC,KAAK,SAASC,YAAY,aAAaC,SAAUP,EAAMQ,iBCH5EC,SAAO,SAACT,GACpB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKO,IAAG,wBAAAC,OAA0BX,EAAMY,GAAK,EAArC,aAAmDC,IAAI,KAC/DZ,EAAAC,EAAAC,cAAA,UAAKH,EAAMc,QAAQC,SCFTC,SAAW,SAAChB,GACxB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMiB,SAASC,IAAI,SAACJ,EAASK,GAAV,OAAgBlB,EAAAC,EAAAC,cAACiB,EAAD,CAAMC,IAAKF,EAAGL,QAASA,EAASF,GAAIO,SCoCtFG,cApCd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACZb,SAAU,GACVc,YAAa,IAEdR,EAAKf,aAAee,EAAKf,aAAawB,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IANPA,mFASM,IAAAW,EAAAR,KACnBS,MAAM,8CAA8CC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAAQF,KAAK,SAACG,GAC7FL,EAAKM,SAAS,CAAEvB,SAAUsB,2CAIfE,GACZf,KAAKc,SAAS,CACbT,YAAaU,EAAEC,OAAOC,yCAIf,IAAAC,EAAAlB,KACFmB,EAAkBnB,KAAKI,MAAMb,SAAS6B,OAAO,SAAChC,GACnD,OAAOA,EAAQC,KAAKgC,cAAcC,SAASJ,EAAKd,MAAMC,YAAYgB,iBAGnE,OACC9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,mBACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAWzC,aAAckB,KAAKlB,eAClCP,EAAAC,EAAAC,cAAC+C,EAAD,CAAUjC,SAAU4B,YA/BNM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.021e9cb6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => {\r\n\treturn <input className=\"search\" type=\"search\" placeholder=\"Search Box\" onChange={props.handleChange} />;\r\n};\r\n","import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = (props) => {\r\n\treturn (\r\n\t\t<div className=\"card-container\">\r\n\t\t\t<img src={`https://robohash.org/${props.id + 1}?set=set2`} alt=\"\" />\r\n\t\t\t<h1>{props.monster.name}</h1>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport '../card-list/card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n\treturn (\r\n\t\t<div className=\"card-list\">{props.monsters.map((monster, i) => <Card key={i} monster={monster} id={i} />)}</div>\r\n\t);\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { SearchBox } from './component/search-box/search-box.component';\nimport { CardList } from './component/card-list/card-list.component';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then((response) => response.json()).then((user) => {\n\t\t\tthis.setState({ monsters: user });\n\t\t});\n\t}\n\n\thandleChange(e) {\n\t\tthis.setState({\n\t\t\tsearchField: e.target.value\n\t\t});\n\t}\n\n\trender() {\n\t\tconst filteredMonster = this.state.monsters.filter((monster) => {\n\t\t\treturn monster.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n    \n\t\treturn (\n\t\t\t<div className=\"App\">\n        <h1 className=\"App-header\">Monster Rolodex</h1>\n        <SearchBox handleChange={this.handleChange}/>\n\t\t\t\t<CardList monsters={filteredMonster} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}